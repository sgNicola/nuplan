scenario_types:
  - stationary
  - near_pedestrian_on_crosswalk
  - traversing_intersection
  - on_traffic_light_intersection
  - medium_magnitude_speed
  - traversing_traffic_light_intersection
  - high_magnitude_speed
  - stationary_in_traffic
  - near_pedestrian_at_pickup_dropoff
  - stationary_at_traffic_light_without_lead
  - near_long_vehicle
  - low_magnitude_speed
  - following_lane_without_lead
  - stationary_at_traffic_light_with_lead
  - on_all_way_stop_intersection
  - near_high_speed_vehicle
  - near_construction_zone_sign
  - following_lane_with_slow_lead
  - behind_long_vehicle
  - starting_protected_noncross_turn
  - near_pedestrian_on_crosswalk_with_ego
  - near_multiple_pedestrians
  - accelerating_at_traffic_light
  - stopping_with_lead
  - following_lane_with_lead
  - stopping_at_traffic_light_without_lead 
  - waiting_for_pedestrian_to_cross

scenario_tokens: null               # List of scenario tokens to include

log_names: ${splitter.log_splits.train}  # Use all logs present in the train split
map_names: null                     # Filter scenarios by map names

num_scenarios_per_type: null        # Number of scenarios per type
# limit_total_scenarios: 34000         # Limit total scenarios (float = fraction, int = num) - this filter can be applied on top of num_scenarios_per_type
limit_total_scenarios: 300000
timestamp_threshold_s: null         # Filter scenarios to ensure scenarios have more than `timestamp_threshold_s` seconds between their initial lidar timestamps
ego_displacement_minimum_m: null    # Whether to remove scenarios where the ego moves less than a certain amount
ego_start_speed_threshold: null     # Limit to scenarios where the ego reaches a certain speed from below
ego_stop_speed_threshold: null      # Limit to scenarios where the ego reaches a certain speed from above
speed_noise_tolerance: null         # Value at or below which a speed change between two timepoints should be ignored as noise.

expand_scenarios: true              # Whether to expand multi-sample scenarios to multiple single-sample scenarios
remove_invalid_goals: true          # Whether to remove scenarios where the mission goal is invalid
shuffle: true        